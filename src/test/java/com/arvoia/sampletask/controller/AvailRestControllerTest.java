/** This class was generated by GenTest@Mobacar */
package com.arvoia.sampletask.controller;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.mockito.Matchers.anyString;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.verify;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.web.client.RestTemplate;

import com.arvoia.sampletask.SampletaskApplication;
import com.arvoia.sampletask.model.AvailResponse;
import com.arvoia.sampletask.model.Error;

@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles("test")
@ContextConfiguration(classes = SampletaskApplication.class)
@AutoConfigureMockMvc
public class AvailRestControllerTest {

	@Autowired
	private AvailRestController underTest;

	@Value("${vendor.url}")
	private String vendorUrl;

	@MockBean
	private RestTemplate restTemplate;

	@Autowired
	private MockMvc mockMvc;

	@Test
	public void testGetAvailabilities_MVC_get() throws Exception {
		// given
		// when
		MvcResult actual = this.mockMvc.perform(get("/avail").accept("application/json;charset=UTF-8"))
				.andExpect(status().isOk()).andReturn();
		// then
		String contentAsString = actual.getResponse().getContentAsString();
		assertNotNull(contentAsString);
		verify(restTemplate).getForEntity(vendorUrl, String.class);
	}

	@Test
	public void testGetAvailabilities() throws Exception {
		// given
		ResponseEntity<String> sampleResponse = new ResponseEntity<>(
				"{\"error\": {\"code\": 600, \"description\": \"system maintenance\"}}", HttpStatus.OK);
		doReturn(sampleResponse).when(restTemplate).getForEntity(anyString(), eq(String.class));

		// when
		AvailResponse actual = underTest.getAvailabilities();
		
		// then
		assertNotNull(actual);
		verify(restTemplate).getForEntity(vendorUrl, String.class);
	}

	@Test
	public void testGetAvailabilitiesError() {
		AvailResponse actual = underTest.getAvailabilities();
		assertNotNull(actual);
		Error error = actual.getError();
		assertEquals(new Integer(1), error.getCode());
		assertEquals("error", actual.getResult());
		assertEquals("vendor service not available", error.getDescription());

	}

}
